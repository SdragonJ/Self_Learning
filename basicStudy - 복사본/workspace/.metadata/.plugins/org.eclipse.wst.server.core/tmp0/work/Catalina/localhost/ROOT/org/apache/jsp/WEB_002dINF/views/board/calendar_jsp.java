/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.39
 * Generated at: 2023-03-27 09:36:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/WEB-INF/views/board/../common/nav.jsp", Long.valueOf(1679907012799L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1676374159835L));
    _jspx_dependants.put("jar:file:/C:/basicStudy/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/board_setting/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/views/board/../common/common.jsp", Long.valueOf(1675825434456L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write("\r\n");
      out.write("<script src=\"//code.jquery.com/jquery-3.2.1.min.js\"></script>\r\n");
      out.write("<!-- 합쳐지고 최소화된 최신 CSS -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\">\r\n");
      out.write("<!-- 부가적인 테마 -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap-theme.min.css\">\r\n");
      out.write("<!-- 합쳐지고 최소화된 최신 자바스크립트 -->\r\n");
      out.write("<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\tconsole.log(\"[common.jsp] 적용\")\r\n");
      out.write("</script>");
      out.write('\n');
      out.write("\r\n");
      out.write("<ul class=\"nav nav-tabs\">\r\n");
      out.write("\t<li role=\"presentation\" class=\"home\"><a href=\"/board/home\">Home</a></li>\r\n");
      out.write("\t<li role=\"presentation\" class=\"dropdown board\">\r\n");
      out.write("\t<a class=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\" role=\"button\" aria-expanded=\"false\"> 게시판<span class=\"caret\"></span></a>\r\n");
      out.write("\t\t<ul class=\"dropdown-menu\" role=\"menu\">\r\n");
      out.write("\t\t\t<li><a href=\"/board/board\">게시판 목록</a></li>\r\n");
      out.write("\t\t\t<li><a href=\"/board/boardAjaxMain\">Ajax 게시판 목록</a></li>\r\n");
      out.write("\t\t\t<li><a href=\"/board/board99\">구구단, 글자색변경</a></li>\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t</li>\r\n");
      out.write("\t<li role=\"presentation\" class=\"calculate\"><a href=\"/board/calculate\">계산기</a></li>\r\n");
      out.write("\t<li role=\"presentation\" class=\"calendar\"><a href=\"/board/calendar\">캘린더(공사중....)</a></li>\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</ul>\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("\tconsole.log(\"[네비게이션바] 적용 jsp\");\r\n");
      out.write("\tvar loc = location.pathname.split(\"/\")[2];\r\n");
      out.write("\tconsole.log(\"loc => \"+loc);\r\n");
      out.write("\t// 해당 페이지에 맞는 네비게이션바 강조 옵션 적용\r\n");
      out.write("\tif(loc.indexOf(\"board\") > -1){\r\n");
      out.write("\t\t$(\".board\").addClass(\"active\");\r\n");
      out.write("\t}else if(loc.indexOf(\"home\") > -1){\r\n");
      out.write("\t\t$(\".home\").addClass(\"active\");\r\n");
      out.write("\t}else if(loc.indexOf(\"create\") > -1){\r\n");
      out.write("\t\t$(\".board\").addClass(\"active\");\r\n");
      out.write("\t}else if(loc.indexOf(\"listDetail\") > -1){\r\n");
      out.write("\t\t$(\".board\").addClass(\"active\");\r\n");
      out.write("\t}else if(loc.indexOf(\"update\") > -1){\r\n");
      out.write("\t\t$(\".board\").addClass(\"active\");\r\n");
      out.write("\t}else if(loc.indexOf(\"board99\") > -1){\r\n");
      out.write("\t\t$(\".board\").addClass(\"active\");\r\n");
      out.write("\t}else if(loc.indexOf(\"calculate\") > -1){\r\n");
      out.write("\t\t$(\".calculate\").addClass(\"active\");\r\n");
      out.write("\t}else if(loc.indexOf(\"calendar\") > -1){\r\n");
      out.write("\t\t$(\".calendar\").addClass(\"active\")\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("});\r\n");
      out.write("</script>");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("<html lang='en'>\n");
      out.write("  <head>\n");
      out.write("  \t<style>\n");
      out.write("  \t\t.calendar {width: 400px; padding: 5px 20px 20px 20px; box-sizing: border-box; border: 1px solid;}\n");
      out.write(".calendar > .header {text-align: center;}\n");
      out.write(".calendar > .header > .title {width:50%; display: inline-block;}\n");
      out.write(".calendar > .header > .calendar_btn {\n");
      out.write("\twidth: 30px;\n");
      out.write("\theight: 30px;\n");
      out.write("\tborder: none;\n");
      out.write("\tpadding: 0;\n");
      out.write("\tbackground-color: #ffffff;\n");
      out.write("\tvertical-align: middle;\n");
      out.write("\tcolor: black;\n");
      out.write("}\n");
      out.write(".calendar > .day {width:100%; display: table; table-layout: fixed;}\n");
      out.write(".calendar > .day > div {display: table-cell; text-align: center; height: 50px; vertical-align: middle;}\n");
      out.write(".calendar > .day > div:first-child {color: red;}\n");
      out.write(".calendar > .day > div:last-of-type {color: blue;}\n");
      out.write(".calendar > .dates {display: flex; flex-wrap: wrap; width: 100%;}\n");
      out.write(".calendar > .dates > .date {text-align: center; width: calc(100%/7); height: 50px; box-sizing: border-box;line-height: 3; border-radius: 3px;} \n");
      out.write(".calendar > .dates > .date:nth-child(7n){color: blue;}\n");
      out.write(".calendar > .dates > .date:nth-child(7n+1){color: red;}\n");
      out.write(".calendar > .dates > .last {color: #c8c8c8 !important;}\n");
      out.write(".calendar > .dates > .next {color: #c8c8c8 !important;}\n");
      out.write("  \t</style>\n");
      out.write("  </head>\n");
      out.write("  \n");
      out.write("  <body>\n");
      out.write("   <div class=\"calendar\">\n");
      out.write("\t<div class=\"header\">\n");
      out.write("\t\t<button class=\"calendar_btn\" onclick=\"prevCal();\">&lt;</button>\n");
      out.write("\t\t<div class=\"title\"><span class=\"year\"></span><span class=\"month\"></span></div>\n");
      out.write("\t\t<button class=\"calendar_btn\" onclick=\"nextCal();\">&gt;</button>\n");
      out.write("\t</div>\n");
      out.write("\t<div class=\"day\">\n");
      out.write("\t\t<div>S</div>\n");
      out.write("\t\t<div>M</div>\n");
      out.write("\t\t<div>T</div>\n");
      out.write("\t\t<div>W</div>\n");
      out.write("\t\t<div>T</div>\n");
      out.write("\t\t<div>F</div>\n");
      out.write("\t\t<div>S</div>\n");
      out.write("\t</div>\n");
      out.write("\t<div class=\"dates\"></div>\n");
      out.write("</div>\n");
      out.write("<input type=\"text\" id=\"period_1\"> ~ <input type=\"text\" id=\"period_2\">\n");
      out.write("  </body>\n");
      out.write("  \n");
      out.write("  \n");
      out.write("  <script type=\"text/javascript\">\n");
      out.write("var CDate = new Date(); \n");
      out.write("var today = new Date();\n");
      out.write("var selectCk = 0;\n");
      out.write("\n");
      out.write("var buildcalendar = function(){\n");
      out.write("\tvar htmlDates = ''; \n");
      out.write("\tvar prevLast = new Date(CDate.getFullYear(), CDate.getMonth(), 0); //지난 달의 마지막 날 \n");
      out.write("\tvar thisFirst = new Date(CDate.getFullYear(), CDate.getMonth(), 1); //이번 달의 첫쨰 날\n");
      out.write("\tvar thisLast = new Date(CDate.getFullYear(), CDate.getMonth() + 1, 0); //이번 달의 마지막 날\n");
      out.write("\tdocument.querySelector(\".year\").innerHTML = CDate.getFullYear() + \"년\";  // year에 년도 출력\n");
      out.write("\tdocument.querySelector(\".month\").innerHTML = (CDate.getMonth() + 1) + \"월\";  //month에 월 출력\n");
      out.write("\tconst dates = []; \n");
      out.write("\tif(thisFirst.getDay()!=0){ \n");
      out.write("\t\tfor(var i = 0; i < thisFirst.getDay(); i++){\n");
      out.write("\t\t\tdates.unshift(prevLast.getDate()-i); // 지난 달 날짜 채우기\n");
      out.write("\t\t} \n");
      out.write("\t} \n");
      out.write("\tfor(var i = 1; i <= thisLast.getDate(); i++){\n");
      out.write("\t\t\t dates.push(i); // 이번 달 날짜 채우기 \n");
      out.write("\t} \n");
      out.write("\tfor(var i = 1; i <= 13 - thisLast.getDay(); i++){ \n");
      out.write("\t\t\t dates.push(i); // 다음 달 날짜 채우기 (나머지 다 채운 다음 출력할 때 42개만 출력함)\n");
      out.write("\t} \n");
      out.write("\t\n");
      out.write("\tfor(var i = 0; i < 42; i++){\n");
      out.write("\t\tif(i < thisFirst.getDay()){\n");
      out.write("\t\t\thtmlDates += '<div class=\"date last\">'+dates[i]+'</div>'; \n");
      out.write("\t\t}else if(today.getDate()==dates[i] && today.getMonth()==CDate.getMonth() && today.getFullYear()==CDate.getFullYear()){\n");
      out.write("\t\t\t htmlDates += '<div id=\"date_'+dates[i]+'\" class=\"date today\" onclick=\"fn_selectDate('+dates[i]+');\">'+dates[i]+'</div>'; \n");
      out.write("\t\t}else if(i >= thisFirst.getDay() + thisLast.getDate()){\n");
      out.write("\t\t\t htmlDates += '<div class=\"date next\">'+dates[i]+'</div>'; \n");
      out.write("\t\t}else{\n");
      out.write("\t\t\thtmlDates += '<div id=\"date_'+dates[i]+'\" class=\"date\" onclick=\"fn_selectDate('+dates[i]+');\">'+dates[i]+'</div>'; \n");
      out.write("\t\t}\n");
      out.write("\t } \n");
      out.write("document.querySelector(\".dates\").innerHTML = htmlDates; \n");
      out.write("} \n");
      out.write("\n");
      out.write("function prevCal(){\n");
      out.write("\t CDate.setMonth(CDate.getMonth()-1); \n");
      out.write("\t buildcalendar(); \n");
      out.write("} \n");
      out.write("function nextCal(){\n");
      out.write("\t CDate.setMonth(CDate.getMonth()+1);\n");
      out.write("\t buildcalendar(); \n");
      out.write("}\n");
      out.write("\n");
      out.write("function fn_selectDate(date){\n");
      out.write("\t\n");
      out.write("\tvar year = CDate.getFullYear();\n");
      out.write("\tvar month = CDate.getMonth() + 1;\n");
      out.write("\tvar date_txt = \"\";\n");
      out.write("\tif(CDate.getMonth + 1 < 10){\n");
      out.write("\t\tmonth = \"0\" + (CDate.getMonth() + 1);\n");
      out.write("\t}\n");
      out.write("\tif(date < 10){\n");
      out.write("\t\tdate_txt = \"0\" + date;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tif(selectCk == 0){\n");
      out.write("\t\t$(\".date\").css(\"background-color\", \"\");\n");
      out.write("\t\t$(\".date\").css(\"color\", \"\");\n");
      out.write("\t\t$(\"#date_\"+date).css(\"background-color\", \"red\");\n");
      out.write("\t\t$(\"#date_\"+date).css(\"color\", \"white\");\n");
      out.write("\t\t\n");
      out.write("\t\t$(\"#period_1\").val(year+\"-\"+month+\"-\"+date);\n");
      out.write("\t\t$(\"#period_2\").val(\"\");\n");
      out.write("\t\tselectCk = date;\n");
      out.write("\t}else{\n");
      out.write("\t\t$(\"#date_\"+date).css(\"background-color\", \"red\");\n");
      out.write("\t\t$(\"#date_\"+date).css(\"color\", \"white\");\t\t\n");
      out.write("\t\tfor(var i = selectCk + 1 ; i < date ; i++){\n");
      out.write("\t\t\t$(\"#date_\"+i).css(\"background-color\", \"#FFDDDD\");\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t$(\"#period_2\").val(year+\"-\"+month+\"-\"+date);\n");
      out.write("\t\tselectCk = 0;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("}\n");
      out.write("\n");
      out.write("buildcalendar();\n");
      out.write("</script>\n");
      out.write("  \n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
